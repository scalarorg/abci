// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/consensus/service.proto

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsensusApi_InitTransaction_FullMethodName = "/scalaris.consensus.ConsensusApi/InitTransaction"
)

// ConsensusApiClient is the client API for ConsensusApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusApiClient interface {
	InitTransaction(ctx context.Context, opts ...grpc.CallOption) (ConsensusApi_InitTransactionClient, error)
}

type consensusApiClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusApiClient(cc grpc.ClientConnInterface) ConsensusApiClient {
	return &consensusApiClient{cc}
}

func (c *consensusApiClient) InitTransaction(ctx context.Context, opts ...grpc.CallOption) (ConsensusApi_InitTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsensusApi_ServiceDesc.Streams[0], ConsensusApi_InitTransaction_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusApiInitTransactionClient{stream}
	return x, nil
}

type ConsensusApi_InitTransactionClient interface {
	Send(*ExternalTransaction) error
	Recv() (*CommitedTransactions, error)
	grpc.ClientStream
}

type consensusApiInitTransactionClient struct {
	grpc.ClientStream
}

func (x *consensusApiInitTransactionClient) Send(m *ExternalTransaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consensusApiInitTransactionClient) Recv() (*CommitedTransactions, error) {
	m := new(CommitedTransactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusApiServer is the server API for ConsensusApi service.
// All implementations must embed UnimplementedConsensusApiServer
// for forward compatibility
type ConsensusApiServer interface {
	InitTransaction(ConsensusApi_InitTransactionServer) error
	mustEmbedUnimplementedConsensusApiServer()
}

// UnimplementedConsensusApiServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusApiServer struct {
}

func (UnimplementedConsensusApiServer) InitTransaction(ConsensusApi_InitTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method InitTransaction not implemented")
}
func (UnimplementedConsensusApiServer) mustEmbedUnimplementedConsensusApiServer() {}

// UnsafeConsensusApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusApiServer will
// result in compilation errors.
type UnsafeConsensusApiServer interface {
	mustEmbedUnimplementedConsensusApiServer()
}

func RegisterConsensusApiServer(s grpc.ServiceRegistrar, srv ConsensusApiServer) {
	s.RegisterService(&ConsensusApi_ServiceDesc, srv)
}

func _ConsensusApi_InitTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusApiServer).InitTransaction(&consensusApiInitTransactionServer{stream})
}

type ConsensusApi_InitTransactionServer interface {
	Send(*CommitedTransactions) error
	Recv() (*ExternalTransaction, error)
	grpc.ServerStream
}

type consensusApiInitTransactionServer struct {
	grpc.ServerStream
}

func (x *consensusApiInitTransactionServer) Send(m *CommitedTransactions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consensusApiInitTransactionServer) Recv() (*ExternalTransaction, error) {
	m := new(ExternalTransaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusApi_ServiceDesc is the grpc.ServiceDesc for ConsensusApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scalaris.consensus.ConsensusApi",
	HandlerType: (*ConsensusApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitTransaction",
			Handler:       _ConsensusApi_InitTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/consensus/service.proto",
}
